// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// beta_update
arma::mat beta_update(arma::mat X, arma::mat y, arma::mat gamma_mat, arma::mat V, double lambda, bool penalty);
RcppExport SEXP _regMR_beta_update(SEXP XSEXP, SEXP ySEXP, SEXP gamma_matSEXP, SEXP VSEXP, SEXP lambdaSEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma_mat(gamma_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(beta_update(X, y, gamma_mat, V, lambda, penalty));
    return rcpp_result_gen;
END_RCPP
}
// sigma_update
arma::vec sigma_update(arma::mat X, arma::mat y, arma::mat gamma_mat, arma::mat beta, arma::vec N);
RcppExport SEXP _regMR_sigma_update(SEXP XSEXP, SEXP ySEXP, SEXP gamma_matSEXP, SEXP betaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma_mat(gamma_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma_update(X, y, gamma_mat, beta, N));
    return rcpp_result_gen;
END_RCPP
}
// lambda_max_compute
double lambda_max_compute(arma::mat X, arma::mat y, arma::mat gamma_mat);
RcppExport SEXP _regMR_lambda_max_compute(SEXP XSEXP, SEXP ySEXP, SEXP gamma_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma_mat(gamma_matSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_max_compute(X, y, gamma_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regMR_beta_update", (DL_FUNC) &_regMR_beta_update, 6},
    {"_regMR_sigma_update", (DL_FUNC) &_regMR_sigma_update, 5},
    {"_regMR_lambda_max_compute", (DL_FUNC) &_regMR_lambda_max_compute, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_regMR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
